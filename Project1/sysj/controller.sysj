Controller(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request;
		output signal pusherExtend,vacOn,armSource,armDest;
		input Integer signal mode;
		input signal pusherExtendM,vacOnM,armSourceM,armDestM;
		)->{
			/* TODO: Write control-logic */

			signal manualMode, autoMode;
			{
				while(true){
					abort(manualMode){
						System.out.println("entering auto");
						abort(armAtDest){
							sustain armDest;
						}
						System.out.println("Arm at dest");
						await(pusherRetracted);
						System.out.println("Pusher retracted");

						while(true){
							abort(!empty){halt;}
							await(request);
							System.out.println("New request");
							abort(armAtDest){
								sustain armDest;
							}
							System.out.println("Arm at dest");

							abort(pusherExtended){
								sustain pusherExtend;
							}
							System.out.println("Pusher extended");
							await(pusherRetracted);
							System.out.println("Pusher retracted");

							abort(armAtSource){
								sustain armSource;
							}
							System.out.println("Arm at source");
							
							trap(T){
								{
									sustain vacOn;
								}
								||
								{
									await(WPgripped);
									System.out.println("WP gripped");
									abort(armAtDest){
										sustain armDest;
									}
									System.out.println("Arm at dest");
									exit(T);
								}
							}

							await(!WPgripped);

							abort(armAtSource){
								sustain armSource;
							}
							System.out.println("Arm at source");
							// Need a feedback from the Arm indicating a cap is picked up
						}
					}
					pause; // breaking path

					// Simply forward signals to outputs
					System.out.println("entering manual");
					abort(autoMode){
						{loop{present(pusherExtendM){emit pusherExtend;} pause;} }
						||
						{loop{present(vacOnM){emit vacOn;} pause;} }
						||
						{loop{present(armSourceM){emit armSource;} pause;} }
						||
						{loop{present(armDestM){emit armDest; System.out.println("Lid Loader - Lid Placed");} pause;} }
					}
				}
			}
			||
			{
				// Checking modes
				await(mode);
				while(true){
					if((Integer)#mode == 0){
						emit autoMode;
					}
					else if((Integer)#mode == 1){
						emit manualMode;
					}
					pause;
				}
			}
		}