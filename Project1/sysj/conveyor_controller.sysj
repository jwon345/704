reaction RotaryQueue(
		:input signal insert, input signal rotate, 
		output signal empty,
		output Boolean channel simFiller, output Boolean channel simCapper, output Boolean channel checkFive
		) {
	Boolean signal simF,simC, simFive;
	{loop{abort(simF){halt;} send simFiller(#simF); }}
	||
	{loop{abort(simC){halt;} send simCapper(#simC); }}
	||
	{loop{abort(simFive){halt;} send checkFive(#simFive); }}
	||
	
	
	{
		boolean[] q = new boolean[5];
		loop {
			abort{
				System.out.println("\n-------------------------");
				boolean o = false, c = false;
				System.out.print("* Current bottle's locations :");
				for(int i=0; i<q.length; i++){
					if(q[i])
						o = true;
					System.out.print(" "+(q[i] ? 1 : 0));
				}
				System.out.println("\n-------------------------");

				present(rotate){
					emit simF(q[1] ? Boolean.TRUE : Boolean.FALSE);
					emit simC(q[3] ? Boolean.TRUE : Boolean.FALSE);
					emit simFive(q[4] ? Boolean.TRUE : Boolean.FALSE);
				}
				if(o)
					halt;
				else 
					sustain empty;
			} case(rotate) do {
				for(int i=q.length-1; i>0; i--){
					q[i] = q[i-1];
				}
				present(insert)
					q[0] = true;
				else
					q[0] = false;
			} case (insert) do{
				present(rotate){
					for(int i=q.length-1; i>0; i--){
						q[i] = q[i-1];
					}
				}
				q[0] = true;
			} 
		}
	}
}

reaction checkReady(: input Boolean channel ReadyIn, output signal ReadyOut){
	loop{
		trap(T){
			{receive ReadyIn; pause; pause; exit(T);}
			||
			{ if(#ReadyIn){ sustain ReadyOut; } }
		}
		pause;
	}
}	



ConveyorController(
    input signal bottleAtPos1, bottleLeftPos5, bottleDeployed;
    output signal motConveyorOnOff;
    output signal bottleDeployedE;
    
    input Boolean channel rotated;
    output Boolean channel convReady;
    
    output Boolean channel simFiller;
    output Boolean channel simCapper;
    output Boolean channel checkFive;

)
->
{
	signal rotaryRotated,empty,insert;
    {
        loop{
        	System.out.println("*Conveyer - Waiting for bottle to be delopyed and conveyor to be cleared...*");

            trap(T){
                {
                    await(bottleAtPos1); // Wait for a bottle to arrive at position 1
                    pause;
                    exit(T);
                }
                ||
                {
                	await(immediate empty);
                    pause;
                	send convReady(Boolean.FALSE);
                	System.out.println("*empty...*");
                }
            }
            pause;
            emit insert;
            send convReady(Boolean.FALSE);
            pause;
            
            waitl(2 s);
            
            {send convReady(Boolean.TRUE);}||{await(rotaryRotated);}
    		pause;

        }
    
    }
    ||
    {
        loop{
            await(bottleDeployed); // Wait for the bottleDeployed signal

            trap(M){
                {
                	System.out.println("*Conveyor - Conveyer On*");
                    sustain motConveyorOnOff; // Keep the conveyor motor running
                }
                ||
                {
                    System.out.println("*Conveyor - Waiting For Bottle at Pos1*");
                    await(bottleAtPos1); // Stop the motor if a bottle is at position 1 or has left position 5
                    System.out.println("*Conveyor - Bottle Reached Pos1*");
                    exit(M);
                }
            }
        }
    }
   
    ||
	RotaryQueue(:insert, rotaryRotated, empty, simFiller, simCapper, checkFive)
	||
	
	{
		loop{ 
			receive rotated; 
			emit rotaryRotated;
			System.out.println("*Rotary rotated");
			pause;
		}
	}
    
    {// To viz
        {while(true)
        	{
	        	present(bottleDeployed)
	        	trap(T) {
	                {
	                    sustain bottleDeployedE;
	                }
	                ||
	                {
	                    await(bottleAtPos1);
	                    exit(T);
	                }
	            }
	            pause;
        	}
        }
    }
}





RotaryController(
	    input signal tableAlignedWithSensor, capOnBottleAtPos1;
	    output signal rotaryTableTrigger;
	    
	    input Boolean channel  convReady, fillerReady, capperReady;
	    output Boolean channel rotated;
	    
	    input Boolean channel checkFive;
	    )->{
	    	signal  cvR, fR, cR;
	    	signal bottleAtPos5;
	    	receive convReady;
	    	receive fillerReady;
	    	receive capperReady;
	    	{
	    		loop{
	    			
	    				{
	    					await(fR);
	    					System.out.println("*Rotary - Filler Ready*");
	    					}
	    				||
	    				{
	    					await(cvR);
	    					System.out.println("*Rotary - Conveyor Ready*");
	    				}
	    				
	    				||
	    				{
	    					await(cR);
	    					System.out.println("*Rotary - Capper Ready*");
	    				}
	    				
	    				
	    				
	    				System.out.println("*Rotary - All controllers are ready*");

	    				
	    				present(bottleAtPos5) {
	    			    waitl(1 s);
	    							trap(T){ 
	    								await(!bottleAtPos5);
	    								loop{
	    									present(bottleAtPos5){
	    									 	System.out.println("*at pos5*");	
	    									} 
	    									else{exit(T);}
	    									pause;
	    								}
	    							}
	    						}

	    						trap(T){
	    							{sustain rotaryTableTrigger;}||{waitl(100 ms); exit(T);}
	    						}
	    		        
	    		        System.out.println("*Rotary - Waiting for Alignment*");
	    		        await(tableAlignedWithSensor);
	    		        
	    		        System.out.println("*Rotary - Aligned*");
	    		    	send rotated(Boolean.TRUE);
	    		        		        
	    		        
	    			}
	    		
	    		}
	    	
	    	||
    		{
    			checkReady(:convReady, cvR)
    			||
    			checkReady(:fillerReady, fR)
    			||
    			checkReady(:capperReady, cR)
    		}		
	    	
	    	||
			{
					loop{
						receive checkFive;
						if((Boolean)#checkFive)
							emit bottleAtPos5;
						pause;
					}
			}
	    	
}
	    
	    
	   
	    
FillerController(
	    		input signal dosUnitEvac,dosUnitFilled;
	    		output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend;
	    		output signal bottleAtPos2E;
	    		
				input Boolean channel simFiller;
	    		output Boolean channel fillerReady;
	    		)->{
	    			
	    			signal bottleAtPos2;
	    			
	    			send fillerReady(Boolean.TRUE);
	    			
	    			
	    			{
	    				loop{
	    				    System.out.println("*Filler - Waiting For BottleAtPos2*");
	    					await(bottleAtPos2);
	    					waitl(2 s);  // Delay before filling
	    					send fillerReady(Boolean.FALSE);
	    					System.out.println("*Filler - Bottle Arrived at Pos 2*");
	    					
	    					abort(dosUnitFilled){
	    						{
	    							System.out.println("*Filler - Valve Injector On*");
	    							sustain valveInjectorOnOff;
	    						}
	    						||
	    						{
	    							sustain dosUnitValveRetract;
	    						}
	    					}
	    					
	    					abort(dosUnitEvac){
	    						{
	    							System.out.println("*Filler - Valve Inlet On*");
	    							sustain valveInletOnOff;
	    						}
	    						||
	    						{
	    							sustain dosUnitValveExtend;
	    						}
	    					}
	    					
	    					send fillerReady(Boolean.TRUE);
	    					System.out.println("*Filler operation done");
	    					
	    					trap(T){ 
	    						await(!bottleAtPos2);
	    						loop{
	    							present(bottleAtPos2){}
	    							else{exit(T);}
	    							pause;
	    						}
	    					}
	    				}
	    			}
	    			
	    			||
	    			{
	    					loop{
	    						receive simFiller;
	    						if((Boolean)#simFiller)
	    							emit bottleAtPos2;
	    						pause;
	    					}
	    			}
	    			
	    			|| 
	    			{
	    				{while(true)
		    				{
		    		        	present(bottleAtPos2)
		    		        	trap(T) {
		    		                {
		    		                    sustain bottleAtPos2E;
		    		                }
		    		                ||
		    		                {
		    		                    await(dosUnitFilled);
		    		                    exit(T);
		    		                }
		    		            }
		    		            pause;
		    	        	}
	    				
	    				}
	    			}
}
	    		

	    		
	    		
	    		
	    		
	    		
	    		
	    		
	    		
	    		
CapperController(
	    				input signal gripperZAxisLowered,gripperZAxisLifted,
	    				gripperTurnHomePos,gripperTurnFinalPos;
	    				
	    				output signal cylPos5ZaxisExtend,gripperTurnRetract,gripperTurnExtend,
	    				capGripperPos5Extend,cylClampBottleExtend;
	    				output signal bottleAtPos4E;
	    				
	    				input Boolean channel simCapper;
	    				output Boolean channel capperReady;
	    				)
	    			-> 		
	    				{
	    					signal bottleAtPos4;
	    					send capperReady(Boolean.TRUE);
	    					
	    					{
	    						loop{
	    							
	    							System.out.println("*Capper: Waiting for bottle at position 4...*");
	    							await(bottleAtPos4);
	    							send capperReady(Boolean.FALSE);
	    							System.out.println("*Capper: Bottle Arivied at Position 4.*");
	    							System.out.println("Capper: Checking if gripper is fully lifted...");
	    							abort(gripperZAxisLifted){
	    				             
	    				                halt;
	    				            }
	    							System.out.println("Capper: Gripper is lifted.");
	    							
	    							pause;
	    							
	    							abort(gripperTurnHomePos)
	    							{
	    								System.out.println("Capper: Untwisting the gripper...");
	    								sustain gripperTurnRetract;
	    							}
	    							System.out.println("Capper: Gripper at home position...");
	    						
	    							
	    							trap(T){
	    								{sustain cylPos5ZaxisExtend;
	    								}
	    								||
	    								{
	    									await(gripperZAxisLowered);
	    									System.out.println("Capper: Gripper fully lowered. Gripping the cap...");
	    									{
	    										sustain capGripperPos5Extend;}
	    									||
	    									
	    										{
	    										System.out.println("Capper: Twisting the gripper...");
	    										sustain gripperTurnExtend;
	    										}
	    									||
	    									{
	    										await(gripperTurnFinalPos);
	    										System.out.println("Capper: Gripper fully turned.");
	    										exit(T);
	    									}
	    								}
	    							}
	    							
	    							await(gripperZAxisLifted);
	    							
	    							send capperReady(Boolean.TRUE);
	    							System.out.println("CapperController: Gripper raised...");
	    							System.out.println("CapperController: Bottle capped. Waiting for bottle to move to next position...");
	    							await(!bottleAtPos4);
	    							
	    							
	    						}
	    					}
	    					
	    					||
	    					{
	    						loop{
	    							receive simCapper;
	    							if(#simCapper) 
	    								emit bottleAtPos4;

	    							pause;
	    						}
	    					}
	    					
	    					||
	    					{// To viz
	    				        {while(true){present(bottleAtPos4)
	    					        	trap(T) {
	    					                {
	    					                    sustain cylClampBottleExtend;
	    					                }
	    					                ||
	    					                {
	    					                    await(gripperTurnFinalPos);
	    					                    exit(T);
	    					                }
	    					            }
	    					            pause;
	    				        	}
	    				        }
	    				    }
	    					
	    					||
	    					
	    					{while(true)
	    			        	{present(bottleAtPos4)
	    				        	trap(T) {
	    				                {
	    				                    sustain bottleAtPos4E;
	    				                }
	    				                ||
	    				                {
	    				                    await(gripperTurnFinalPos);
	    				                    exit(T);
	    				                }
	    				            }
	    				            pause;
	    			        	}
	    					}
	    					

	    				}
	    		
