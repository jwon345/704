reaction checkZoneWorkHours(: input int signal occupancy, input int signal lightingI, signal workhours, signal windowONOFF){

    signal test;
    loop{
    trap(T) {
        {
            int zoneOcc = (Integer)#occupancy;
            int zoneLightInt = (Integer)#lightingI;

            if (workhours && zoneOcc > 0 && zoneLightInt < 50) {
                sustain windowONOFF;
            }
            pause;
        }
        ||
        {
            await(test);
            exit(T);
        }
        
        || 
        
        {
            while(true) {
                if ((Integer)#occupancy == 0 || (Integer)#lightingI >= 50 || !workhours){
                    emit test;
                }
                pause;
            }
        }
    }
    }
}

reaction checkZoneAfterHours(: input int signal occupancy, input int signal lightingI, signal afterhours, signal LightONOFF){

    signal test;
    loop{
    trap(T) {
        {
            int zoneOcc = (Integer)#occupancy;
            int zoneLightInt = (Integer)#lightingI;

            if (afterhours && zoneOcc > 0 && zoneLightInt < 50) {
                sustain LightONOFF;
            }
            pause;
        }
        ||
        {
            await(test);
            exit(T);
        }
        
        || 
        
        {
            while(true) {
                if ((Integer)#occupancy == 0 || (Integer)#lightingI >= 50 || !afterhours){
                    emit test;
                }
                pause;
            }
        }
    }
    }
}

ECS_HVACController (input int signal currentTime;
						input int signal zoneOneSevenTemp, zoneTwoThreeTemp, zoneFourFiveSixTemp;
						input int signal zoneOneSevenHumid, zoneTwoThreeHumid, zoneFourFiveSixHumid;
						input signal zoneOneSevenAtTempHumid, zoneTwoThreeAtTempHumid, zoneFourFiveSixAtTempHumid;
						input int signal zoneOneOccupancy_B, zoneSevenOccupancy_B;
						
						output signal zoneOneSevenFanONOFF, zoneTwoThreeFanONOFF, zoneFourFiveSixACONOFF;
						output signal zoneOneSevenHeaterONOFF, zoneTwoThreeHeaterONOFF;
						
			) -> 


{
	
	signal workhrs, afterhrs;
	
	{
	int currentTemp = 30;
	int previousHour = -1; // Initialize with an invalid hour value
		
	{loop{
	    await(currentTime);
	    int currentHour = (Integer)#currentTime;
	    
	        if (currentHour >= 9 && currentHour <= 17) {
	            emit workhrs; 
	        } else {
	            emit afterhrs; 
	        }
	    }
	}

	
	||
	
	{
		
	int currentTemp = 0;
	int currentHumidity = 0;
	System.out.println("Current Temp For Zone 1,7: " + currentTemp + "(°C)");
	
	loop{
			int tempZoneOneSeven = (Integer)#zoneOneSevenTemp;
			int humidityZoneOneSeven = (Integer)#zoneOneSevenHumid;

	    	present(workhrs){
	  
	    	
	    	if (tempZoneOneSeven > currentTemp) {
	    		System.out.println("Turning ON Heater to Heat Up for Zone 1,7");
	    		emit zoneOneSevenHeaterONOFF;
	    		currentTemp = tempZoneOneSeven;
	    		
	    		await (zoneOneSevenAtTempHumid);
	    		System.out.println("Current Temp For Zone 1,7: " + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    		
	    	}
	    	
	    	else if (tempZoneOneSeven < currentTemp) {
	    		System.out.println("Turning ON Fan to Cool Down for Zone 1,7");
	    		currentTemp = tempZoneOneSeven;
	       		emit zoneOneSevenFanONOFF;

	       		await (zoneOneSevenAtTempHumid);
	    		System.out.println("Current Temp For Zone 1,7: " + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    	}
	    	
	    	if (humidityZoneOneSeven > currentHumidity) {
	            System.out.println("Turning ON Heater to increase humidity for Zone 1,7");
	            emit zoneOneSevenHeaterONOFF;
	            currentHumidity = humidityZoneOneSeven;
	            
	        	await (zoneOneSevenAtTempHumid);
	            System.out.println("Current Humidity For Zone 1,7: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        } else if (humidityZoneOneSeven < currentHumidity) {
	            System.out.println("Turning ON Fan to reduce humidity for Zone 1,7");
	            emit zoneOneSevenFanONOFF;
	            currentHumidity = humidityZoneOneSeven;
	            
	        	await (zoneOneSevenAtTempHumid);
	            System.out.println("Current Humidity For Zone 1,7: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        }
	    	}
	    	
	    	present(afterhrs){

	            int zoneOneOcc = (Integer)#zoneOneOccupancy_B;
	            int zoneSevenOcc = (Integer)#zoneSevenOccupancy_B;

	            if (zoneOneOcc > 0 || zoneSevenOcc > 0) {
	                //System.out.println("Someone detected in Zone 1 or Zone 7 during non-working hours Enabling Fan/Heaters");
	                
	                if (tempZoneOneSeven > currentTemp) {
	    	    		System.out.println("Turning ON Heater to Heat Up for Zone 1,7");
	    	    		emit zoneOneSevenHeaterONOFF;
	    	    		currentTemp = tempZoneOneSeven;
	    	    		
	    	    		await (zoneOneSevenAtTempHumid);
	    	    		System.out.println("Current Temp For Zone 1,7: " + currentTemp + "(°C)");
	    	    		System.out.println("\n-------------------------");
	    	    		
	    	    	}
	    	    	
	    	    	else if (tempZoneOneSeven < currentTemp) {
	    	    		System.out.println("Turning ON Fan to Cool Down for Zone 1,7");
	    	    		currentTemp = tempZoneOneSeven;
	    	       		emit zoneOneSevenFanONOFF;

	    	       		await (zoneOneSevenAtTempHumid);
	    	    		System.out.println("Current Temp For Zone 1,7: " + currentTemp + "(°C)");
	    	    		System.out.println("\n-------------------------");
	    	    	}
	    	    	
	    	    	if (humidityZoneOneSeven > currentHumidity) {
	    	            System.out.println("Turning ON Heater to increase humidity for Zone 1,7");
	    	            emit zoneOneSevenHeaterONOFF;
	    	            currentHumidity = humidityZoneOneSeven;
	    	            
	    	        	await (zoneOneSevenAtTempHumid);
	    	            System.out.println("Current Humidity For Zone 1,7: " + currentHumidity + "(%)");
	    	        	System.out.println("\n-------------------------");
	    	        } else if (humidityZoneOneSeven < currentHumidity) {
	    	            System.out.println("Turning ON Fan to reduce humidity for Zone 1,7");
	    	            emit zoneOneSevenFanONOFF;
	    	            currentHumidity = humidityZoneOneSeven;
	    	            
	    	        	await (zoneOneSevenAtTempHumid);
	    	            System.out.println("Current Humidity For Zone 1,7: " + currentHumidity + "(%)");
	    	        	System.out.println("\n-------------------------");
	    	        }
	            }
	            
	            else {
	            	
	            }
	        }
	    	
	    	pause;

		}
	}
	
	||
	
	{
	int currentTemp = 0;
	int currentHumidity = 0;
	System.out.println("Current Temp For Zone 2,3: "+ currentTemp + "(°C)");
	
	
		loop{
			present(workhrs){
	    	int tempzoneTwoThree = (Integer)#zoneTwoThreeTemp;
	    	int humidityzoneTwoThree = (Integer)#zoneTwoThreeHumid;

	    	if (tempzoneTwoThree > currentTemp) {
	    		System.out.println("Turning ON Heater to Heat Up for Zone 2,3");
	    		emit zoneTwoThreeHeaterONOFF;
	    		currentTemp = tempzoneTwoThree;
	    		
	    		await (zoneTwoThreeAtTempHumid);
	    		System.out.println("Current Temp for Zone 2,3:" + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    	}
	    	
	    	if (tempzoneTwoThree < currentTemp) {
	    		System.out.println("Turning ON Fan to Cool Down for Zone 2,3");
	    		emit zoneTwoThreeFanONOFF;
	    		currentTemp = tempzoneTwoThree;
	    		
	    		
	    		await (zoneTwoThreeAtTempHumid);
	    		System.out.println("Current Temp for Zone 2,3:" + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    	}
	    	
	    	if (humidityzoneTwoThree > currentHumidity) {
	            System.out.println("Turning ON Heater to increase humidity for Zone 2,3");
	    		emit zoneTwoThreeHeaterONOFF;
	            currentHumidity = humidityzoneTwoThree;
	        	
	    		await (zoneTwoThreeAtTempHumid);
	            System.out.println("Current Humidity For Zone 2,3: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        } else if (humidityzoneTwoThree < currentHumidity) {
	            System.out.println("Turning ON Fan to reduce humidity for Zone 2,3");
	        	emit zoneTwoThreeFanONOFF;
	            currentHumidity = humidityzoneTwoThree;
	            
	        	
	    		await (zoneTwoThreeAtTempHumid);
	            System.out.println("Current Humidity For Zone 2,3: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        }
			}
	    	pause;
		}
	}
	
	||
	
	{
	int currentTemp = 0;
	int currentHumidity = 0;
	System.out.println("Current Temp For Zone 4,5,6: "+ currentTemp + "(°C)");
	
	
		loop{
			present(workhrs){
	    	int tempzoneFourFiveSixTemp = (Integer)#zoneFourFiveSixTemp;
	    	int humidityzoneFourFiveSix = (Integer)#zoneFourFiveSixHumid;
	    	
	    	if (tempzoneFourFiveSixTemp > currentTemp) {
	    		System.out.println("Turning ON AC to Heat Up for Zone 4,5,6");
	    		emit zoneFourFiveSixACONOFF;
	    		currentTemp = tempzoneFourFiveSixTemp;
	    		
	    		await(zoneFourFiveSixAtTempHumid);
	    		System.out.println("Current Temp for Zone 4,5,6:" + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    	}
	    	
	    	if (tempzoneFourFiveSixTemp < currentTemp) {
	    		System.out.println("Turning ON AC to Cool Down for Zone 4,5,6");
	    		emit zoneFourFiveSixACONOFF;
	    		currentTemp = tempzoneFourFiveSixTemp;
	    		
	    		await(zoneFourFiveSixAtTempHumid);
	    		System.out.println("Current Temp for Zone 4,5,6:" + currentTemp + "(°C)");
	    		System.out.println("\n-------------------------");
	    	}
	    	
	    	if (humidityzoneFourFiveSix > currentHumidity) {
	            System.out.println("Turning ON AC to increase humidity for Zone 4,5,6");
	        	emit zoneFourFiveSixACONOFF;
	            currentHumidity = humidityzoneFourFiveSix;
	            
	        	await(zoneFourFiveSixAtTempHumid);
	            System.out.println("Current Humidity For Zone 4,5,6: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        } else if (humidityzoneFourFiveSix < currentHumidity) {
	            System.out.println("Turning ON AC to reduce humidity for Zone 4,5,6");
	        	emit zoneFourFiveSixACONOFF;
	            currentHumidity = humidityzoneFourFiveSix;
	            
	        	await(zoneFourFiveSixAtTempHumid);
	            System.out.println("Current Humidity For Zone 4,5,6: " + currentHumidity + "(%)");
	        	System.out.println("\n-------------------------");
	        }
	    	
			}
	    	pause;
		}
	}
			
	}
}	

ECS_LightingController (
		input signal Zone1_Finished;
		
		
		input int signal currentTime_2;
		input int signal zoneOneOccupancy, zoneTwoOccupancy, zoneThreeOccupancy, zoneFourOccupancy, zoneFiveOccupancy, zoneSixOccupancy, zoneSevenOccupancy;
		input int signal zoneOneLightingI, zoneTwoLightingI, zoneThreeLightingI, zoneFourLightingI, zoneFiveLightingI, zoneSixLightingI, zoneSevenLightingI;

		output signal zoneOneLightONOFF, zoneTwoLightONOFF, zoneThreeLightONOFF, zoneFourLightONOFF,
		zoneFiveLightONOFF, zoneSixLightONOFF, zoneSevenLightONOFF;
	
	    output signal zoneOneWindowONOFF, zoneTwoWindowONOFF, zoneThreeWindowONOFF, zoneFourWindowONOFF, 
	    zoneFiveWindowONOFF, zoneSixWindowONOFF, zoneSevenWindowONOFF;

		) -> {
			
			signal workhrs, afterhrs;
			
			{loop{

			    await(currentTime_2);
			    int currentHour = (Integer)#currentTime_2;
			    
			        if (currentHour >= 9 && currentHour <= 17) {
			            emit workhrs; 
			            pause;


			        } else if ((currentHour >= 18 && currentHour <= 24) || (currentHour >= 0 && currentHour < 9)) {
			            emit afterhrs;
			            pause;
			            
			        }
			     
			        
			    }
			
			
			}
			
			||
			
			{

				 checkZoneWorkHours(:zoneOneOccupancy, zoneOneLightingI, workhrs, zoneOneWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneTwoOccupancy, zoneTwoLightingI, workhrs, zoneTwoWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneThreeOccupancy, zoneThreeLightingI, workhrs, zoneThreeWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneFourOccupancy, zoneFourLightingI, workhrs, zoneFourWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneFiveOccupancy, zoneFiveLightingI, workhrs, zoneFiveWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneSixOccupancy, zoneSixLightingI, workhrs, zoneSixWindowONOFF)
		            ||
		            checkZoneWorkHours(:zoneSevenOccupancy, zoneSevenLightingI, workhrs, zoneSevenWindowONOFF)

		    
		            ||
		    
		   
		            checkZoneAfterHours(:zoneOneOccupancy, zoneOneLightingI, afterhrs, zoneOneLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneTwoOccupancy, zoneTwoLightingI, afterhrs, zoneTwoLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneThreeOccupancy, zoneThreeLightingI, afterhrs,zoneThreeLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneFourOccupancy, zoneFourLightingI, afterhrs,zoneFourLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneFiveOccupancy, zoneFiveLightingI, afterhrs,zoneFiveLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneSixOccupancy, zoneSixLightingI, afterhrs,zoneSixLightONOFF)
		            ||
		            checkZoneAfterHours(:zoneSevenOccupancy, zoneSevenLightingI, afterhrs, zoneSevenLightONOFF)
	
			
	
			}

		
		
		}


ECS_SmokeController (input signal detectSmoke, stopAll;
					output signal sirenONOFF;
					output Boolean channel smokeReady;

) 
-> {
	{while(true){
		send smokeReady(Boolean.TRUE);
		
		present(detectSmoke)
		{
		    trap(T) {
		        {
		            sustain sirenONOFF;  
		        }
		        ||
		        {
		            send smokeReady(Boolean.FALSE);
		            System.out.println("Fire Alert - Please Exit The Building");
		            await(!detectSmoke);  // Wait until the smoke is no longer detected
		            exit(T);  // Exit the trap once the smoke is cleared
		        }
		    }
		}
		pause;
	}

	}
}

	


