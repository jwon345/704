reaction RotaryQueue(
		:input signal insert, input signal rotate, 
		output signal empty, output signal bottleLeftPos5,
		output Boolean channel simFiller, output Boolean channel simCapper, output Boolean channel checkFive, 
		output Boolean channel checkThree, 	output Boolean channel checkOne
		) {
	Boolean signal simF,simC, simFive, simThree, simOne;
	{loop{abort(simF){halt;} send simFiller(#simF); }}
	||
	{loop{abort(simC){halt;} send simCapper(#simC); }}
	||
	{loop{abort(simFive){halt;} send checkFive(#simFive); }}
	||
	{loop{abort(simThree){halt;} send checkThree(#simThree); }}
	||
	{loop{abort(simOne){halt;} send checkOne(#simOne); }}
	||
	
	{
		boolean[] q = new boolean[5];
		loop {
			abort{
				System.out.println("\n-------------------------");
				boolean o = false, c = false;
				System.out.print("* Current bottle's locations :");
				for(int i=0; i<q.length; i++){
					if(q[i])
						o = true;
					System.out.print(" "+(q[i] ? 1 : 0));
				}
				System.out.println("\n-------------------------");

				present(rotate){
					emit simOne(q[1] ? Boolean.TRUE : Boolean.FALSE);
					emit simF(q[1] ? Boolean.TRUE : Boolean.FALSE);
					emit simThree(q[2] ? Boolean.TRUE : Boolean.FALSE);
					emit simC(q[3] ? Boolean.TRUE : Boolean.FALSE);
					emit simFive(q[4] ? Boolean.TRUE : Boolean.FALSE);
				}
				if(o)
					halt;
				else 
					sustain empty;
			} case(rotate) do {
				
				if(q[4]) {
			        emit bottleLeftPos5; // Emitting the signal when a bottle leaves position 5
			    }
				
				
				for(int i=q.length-1; i>0; i--){
					q[i] = q[i-1];
				}
				present(insert)
					q[0] = true;
				else
					q[0] = false;
			} case (insert) do{
				present(rotate){
					for(int i=q.length-1; i>0; i--){
						q[i] = q[i-1];
					}
				}
				q[0] = true;
			} 
		}
	}
}

reaction checkReady(: input Boolean channel ReadyIn, output signal ReadyOut){
	loop{
		trap(T){
			{receive ReadyIn; pause; pause; exit(T);}
			||
			{ if(#ReadyIn){ sustain ReadyOut; } }
		}
		pause;
	}
}	



ConveyorController(
    input signal bottleAtPos1, bottleDeployed;
    output signal motConveyorOnOff;
    output signal bottleDeployedE, rotaryTableTriggerE, bottleLeftPos5E;
    
    input Boolean channel rotated;
    output Boolean channel convReady;
    
    output Boolean channel simFiller;
    output Boolean channel simCapper;
    output Boolean channel checkFive;
    output Boolean channel checkThree;
    output Boolean channel checkOne;

)
->
{
	signal rotaryRotated,empty,insert, bottleLeftPos5;
    {
        loop{
        	System.out.println("*Conveyer - Waiting for bottle to be delopyed and conveyor to be cleared...*");

            trap(T){
                {
                    await(bottleAtPos1); // Wait for a bottle to arrive at position 1
                    pause;
                    exit(T);
                }
                ||
                {
                	await(immediate empty);
                    pause;
                	send convReady(Boolean.FALSE);
                	System.out.println("*Empty...*");
                }
            }
            pause;
            emit insert;
            send convReady(Boolean.FALSE);
            pause;
            
            waitl(2 s);

            {send convReady(Boolean.TRUE);}
            ||
            {await(rotaryRotated);}
    		pause;

        }
    
    }
    ||
    {
        loop{
            
          	await(!bottleLeftPos5E);
          	pause;
            await(bottleDeployed); // Wait for the bottleDeployed signal
            
            waitl (1s);
            
            
            trap(M){
                {
                	System.out.println("*Conveyor - Conveyer On*");
                    sustain motConveyorOnOff; // Keep the conveyor motor running
                }
                ||
                {
                	waitl(2 s);
                    System.out.println("*Conveyor - Waiting For Bottle at Pos1*");
                    await(bottleAtPos1); // Stop the motor if a bottle is at position 1 or has left position 5
                    System.out.println("*Conveyor - Bottle Reached Pos1*");
                    exit(M);
                }
            }
        }
    }
   
    ||
	RotaryQueue(:insert, rotaryRotated, empty, bottleLeftPos5, simFiller, simCapper, checkFive, checkThree, checkOne)
	||
	
	{
		loop{ 
			receive rotated; 
			emit rotaryRotated;
		  	emit rotaryTableTriggerE;
			System.out.println("*Rotary rotated");
			pause;
		}
	}
    
    ||
    
    {
    	loop{
	    	await(immediate bottleLeftPos5);
	    	waitl (1s);
	    	pause;
	    	System.out.println("*Bottle Left From Position 5 Of The Index Table, Still On The Conveyor");
    	}
    }
    ||
    {// To viz
        {while(true)
        	{
        		await (!bottleLeftPos5E);
	        	present(bottleDeployed)
	        	trap(T) {
	                {
	                    sustain bottleDeployedE;
	                }
	                ||
	                {
	                    await(bottleAtPos1);
	                    exit(T);
	                }
	            }
	            pause;
        	}
        }
        
        ||

        {while(true){
	        	present(bottleLeftPos5)
	        	trap(T) {
	                {sustain bottleLeftPos5E;}
	                ||
	                {
	                    waitl(1s);
	                    System.out.println("*Bottle Sent to Collection Point");
	                    exit(T);
	                }
	            }
	            pause;}
        }
    }

}





RotaryController(
	    input signal tableAlignedWithSensor, capOnBottleAtPos1;
	    output signal rotaryTableTrigger, bottleAtPos5E;
	    
	    input Boolean channel  convReady, fillerReady, capperReady, lidLoaderReady;
	    output Boolean channel rotated;
	    
	    input Boolean channel checkFive, checkOne;
	    )->{
	    	signal  cvR, fR, cR , lR;
	    	signal bottleAtPos5;
	    	receive convReady;
	    	receive fillerReady;
	    	receive capperReady;
	    	receive lidLoaderReady;
	    	{
	    		loop{
	    			
	    				{
	    					await(fR);
	    					System.out.println("*Rotary - Filler Ready*");
	    					}
	    				||
	    				{
	    					await(cvR);
	    					System.out.println("*Rotary - Conveyor Ready*");
	    				}
	    				
	    				||
	    				{
	    					await(cR);
	    					System.out.println("*Rotary - Capper Ready*");
	    				}
	    				
	    				||
	    				{
	    					await(lR);
	    					System.out.println("*Rotary - LidLoader Ready*");
	    				}
	    							
	    				System.out.println("*Rotary - All controllers are ready*");

	    				
	    				present(bottleAtPos5) {
	    							trap(T){ 
	    								await(!bottleAtPos5);
	    								loop{
	    									present(bottleAtPos5){	
	    									} 
	    									else{exit(T);}
	    									pause;
	    								}
	    							}
	    						}

	    						trap(T){
	    							{sustain rotaryTableTrigger;}||{waitl(300 ms); exit(T);}
	    						}
	    		        
	    		        System.out.println("*Rotary - Waiting for Alignment*");
	    		        await(tableAlignedWithSensor);
	    		        System.out.println("*Rotary - Aligned*");
	    		    	send rotated(Boolean.TRUE);
	    		    	waitl(5 s);
	    		    	pause;
	    				int i = 0;
	    				trap(T){
	    					loop{
	    						i++;
	    						if(i > 5)
	    							exit(T);
	    						pause;
	    					}
	    				}
	    				
	    			}
	    		
	    		}
	    	
	    	||
    		{
    			checkReady(:convReady, cvR)
    			||
    			checkReady(:fillerReady, fR)
    			||
    			checkReady(:capperReady, cR)
    			||
    			checkReady(:lidLoaderReady, lR)
    		}		
	    	
	    	||
			{
					loop{
						receive checkFive;
						if((Boolean)#checkFive)
							emit bottleAtPos5;
						pause;
					}
					
					
					
			}
	    	
	    	|| 
	    	
	    	{
	    	
		        
		        {while(true)
		        	{present(bottleAtPos5)trap(T) {
		                {
		                    sustain bottleAtPos5E;
		                }
		                ||
		                {
		                    await(rotaryTableTrigger);
		                    exit(T);
		                };
		        	}
		        	pause;
		        
		        	}
		        }
		        
		        
	    	}	    	
}
	    
	    
	   
	    
FillerController(
	    		input signal dosUnitEvac,dosUnitFilled;
	    		output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend;
	    		output signal bottleAtPos2E;
	    		
				input Boolean channel simFiller;
	    		output Boolean channel fillerReady;
	    		)->{
	    			
	    			signal bottleAtPos2;	    			
	    			send fillerReady(Boolean.TRUE);
	    			
	    			
	    			{
	    				loop{
	    				    System.out.println("*Filler - Waiting For BottleAtPos2*");
	    					await(bottleAtPos2);
	    					send fillerReady(Boolean.FALSE);
	    					waitl(2 s);  // Delay before filling
	    					
	    					System.out.println("*Filler - Bottle Arrived at Pos 2*");

	    					
	    					
	    					abort(dosUnitFilled){
	    						{
	    							System.out.println("*Filler - Valve Injector On*");
	    							sustain valveInjectorOnOff;
	    						}
	    						||
	    						{
	    							sustain dosUnitValveRetract;
	    						}
	    					}
	    					
	    					
	    					abort(dosUnitEvac){
	    						{
	    							System.out.println("*Filler - Valve Inlet On*");
	    							sustain valveInletOnOff;
	    						}
	    						||
	    						{
	    							sustain dosUnitValveExtend;
	    						}
	    					}
	    					
	    				
	    					send fillerReady(Boolean.TRUE);
	    					System.out.println("*Filler operation done");
	    					
	    					trap(T){ 
	    						await(!bottleAtPos2);
	    						loop{
	    							present(bottleAtPos2){}
	    							else{exit(T);}
	    							pause;
	    						}
	    					}
	    				}
	    			}
	    			
	    			||
	    			{
	    					loop{
	    						receive simFiller;
	    						if((Boolean)#simFiller)
	    							emit bottleAtPos2;
	    						pause;
	    					}
	    			}
	    			
	    			|| 
	    			{
	    				{while(true)
		    				{
		    		        	present(bottleAtPos2)
		    		        	trap(T) {
		    		                {
		    		                    sustain bottleAtPos2E;
		    		                }
		    		                ||
		    		                {
		    		                    await(dosUnitEvac);
		    		                    exit(T);
		    		                }
		    		            }
		    		            pause;
		    	        	}
	    				
	    				}
	    			}
}
	    		

	    		
	    		
	    		
	    		
	    		
	    		
	    		
	    		
	    		
CapperController(
	    				input signal gripperZAxisLowered,gripperZAxisLifted,
	    				gripperTurnHomePos,gripperTurnFinalPos;
	    				
	    				output signal cylPos5ZaxisExtend,gripperTurnRetract,gripperTurnExtend,
	    				capGripperPos5Extend,cylClampBottleExtend;
	    				output signal bottleAtPos4E;
	    				
	    				input Boolean channel simCapper;
	    				output Boolean channel capperReady;
	    				)
	    			-> 		
	    				{
	    					signal bottleAtPos4;
	    					send capperReady(Boolean.TRUE);
	    					
	    					{
	    						loop{
	    							
	    							System.out.println("*Capper: Waiting for bottle at position 4...*");
	    							await(bottleAtPos4);
	    							send capperReady(Boolean.FALSE);
	    							System.out.println("*Capper: Bottle Arivied at Position 4.*");
	    							System.out.println("Capper: Checking if gripper is fully lifted...");
	    							abort(gripperZAxisLifted){
	    				             
	    				                halt;
	    				            }
	    							System.out.println("Capper: Gripper is lifted.");
	    							
	    							pause;
	    							
	    							abort(gripperTurnHomePos)
	    							{
	    								System.out.println("Capper: Untwisting the gripper...");
	    								sustain gripperTurnRetract;
	    							}
	    							System.out.println("Capper: Gripper at home position...");
	    						
	    							
	    							trap(T){
	    								{sustain cylPos5ZaxisExtend;
	    								}
	    								||
	    								{
	    									await(gripperZAxisLowered);
	    									System.out.println("Capper: Gripper fully lowered. Gripping the cap...");
	    									{
	    										sustain capGripperPos5Extend;}
	    									||
	    									
	    										{
	    										System.out.println("Capper: Twisting the gripper...");
	    										sustain gripperTurnExtend;
	    										}
	    									||
	    									{
	    										await(gripperTurnFinalPos);
	    										System.out.println("Capper: Gripper fully turned.");
	    										exit(T);
	    									}
	    								}
	    							}
	    							
	    							await(gripperZAxisLifted);
	    							
	    							send capperReady(Boolean.TRUE);
	    							System.out.println("CapperController: Gripper raised...");
	    							System.out.println("CapperController: Bottle capped. Waiting for bottle to move to next position...");
	    							trap(T){  await(!bottleAtPos4);
	    								loop{
	    									present(bottleAtPos4){}
	    									else{exit(T);}
	    									pause;
	    								}
	    							}
	    							
	    							
	    						}
	    					}
	    					
	    					||
	    					{
	    						loop{
	    							receive simCapper;
	    							if((Boolean)#simCapper) 
	    								emit bottleAtPos4;

	    							pause;
	    						}
	    					}
	    					
	    					||
	    					{// To viz
	    				        {while(true){present(bottleAtPos4)
	    					        	trap(T) {
	    					                {
	    					                    sustain cylClampBottleExtend;
	    					                }
	    					                ||
	    					                {
	    					                    await(gripperTurnFinalPos);
	    					                    exit(T);
	    					                }
	    					            }
	    					            pause;
	    				        	}
	    				        }
	    				    }
	    					
	    					||
	    					
	    					{while(true)
	    			        	{present(bottleAtPos4)
	    				        	trap(T) {
	    				                {
	    				                    sustain bottleAtPos4E;
	    				                }
	    				                ||
	    				                {
	    				                    await(gripperTurnFinalPos);
	    				                    exit(T);
	    				                }
	    				            }
	    				            pause;
	    			        	}
	    					}
	    				}
	    		

Controller(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request;
		output signal pusherExtend,vacOn,armSource,armDest, bottleAtPos3E;
		input Integer signal mode;
		input signal pusherExtendM,vacOnM,armSourceM,armDestM;
		
		input Boolean channel checkThree;
		output Boolean channel lidLoaderReady;
		)->{
			
			signal manualMode, autoMode, bottleAtPos3, done;
			{
				send lidLoaderReady(Boolean.TRUE);
				while(true){
					await (bottleAtPos3);
					send lidLoaderReady(Boolean.FALSE);
					abort(manualMode){
						System.out.println("*Capper - Entering Auto");
						abort(armAtDest){
							sustain armDest;
						}
						System.out.println("Arm at dest");
						await(pusherRetracted);
						System.out.println("Pusher retracted");

						while(true){
							abort(!empty){halt;}
							await(request);
							System.out.println("New request");
							abort(armAtDest){
								sustain armDest;
							}
							System.out.println("Arm at dest");

							abort(pusherExtended){
								sustain pusherExtend;
							}
							System.out.println("Pusher extended");
							await(pusherRetracted);
							System.out.println("Pusher retracted");

							abort(armAtSource){
								sustain armSource;
							}
							System.out.println("Arm at source");
							
							trap(T){
								{
									sustain vacOn;
								}
								||
								{
									await(WPgripped);
									System.out.println("WP gripped");
									abort(armAtDest){
										sustain armDest;
									}
									System.out.println("Arm at dest");
									exit(T);
								}
							}

							await(!WPgripped);

							abort(armAtSource){
								sustain armSource;
							}
							
							
							emit done;
							send lidLoaderReady(Boolean.TRUE);
							
							System.out.println("Arm at source");
							pause;
							// Need a feedback from the Arm indicating a cap is picked up
						}
					}
					pause; // breaking path

					// Simply forward signals to outputs
					System.out.println("entering manual");
					abort(autoMode){
						{loop{present(pusherExtendM){emit pusherExtend;} pause;} }
						||
						{loop{present(vacOnM){emit vacOn;} pause;} }
						||
						{loop{present(armSourceM){emit armSource;send lidLoaderReady(Boolean.TRUE); waitl (4000 ms); emit done;} pause;} }
						||
						{loop{present(armDestM){emit armDest;} pause;} }
					}
				}
			}
			||
			{
				// Checking modes
				await(mode);
				while(true){
					if((Integer)#mode == 0){
						emit autoMode;
					}
					else if((Integer)#mode == 1){
						emit manualMode;
					}
					pause;
				}
			}
			
			||
			
			{
				loop{
					receive checkThree;
					if((Boolean)#checkThree)
						emit bottleAtPos3;
					pause;
				}
			}
			
			||
			
			  {while(true)
	        	{present(bottleAtPos3)
				  trap(T) {
	                {
	                    sustain bottleAtPos3E;
	                }
	                ||
	                {
	                    await(done);
	                    exit(T);
	                };
	        	}
	        	pause;
	        
	        	}
			  }
		}	    				